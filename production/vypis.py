import asyncio
from bleak import BleakScanner
# P≈ôedpokl√°d√°me, ≈æe mqttportabo.py je buƒè ve stejn√©m adres√°≈ôi, nebo v PYTHONPATH
from mqttportabo import send_payload # Zkontrolujte um√≠stƒõn√≠ mqttportabo.py
import time
import os
from datetime import datetime
import re # P≈ôid√°n chybƒõj√≠c√≠ import re

# Importy z adres√°≈ôe 'production'
# Aby to fungovalo, adres√°≈ô 'production' by mƒõl b√Ωt buƒè v sys.path,
# nebo by 'production' mƒõl b√Ωt bal√≠ƒçek (obsahovat __init__.py)
# a spou≈°tƒõt vypis.py z ko≈ôenov√©ho adres√°≈ôe projektu.
from production.prijimac import uuid_uzivatele # Pou≈æ√≠v√° se pro MQTT t√©ma
from production.porovnani import normalize_mac_address, check_if_device_is_nearby

# Slovn√≠k zn√°m√Ωch UUID a jejich typ≈Ø za≈ô√≠zen√≠
KNOWN_DEVICE_UUIDS = {
    "0000180f-0000-1000-8000-00805f9b34fb": "Battery Service",
    "0000180a-0000-1000-8000-00805f9b34fb": "Device Information",
    "0000fe9f-0000-1000-8000-00805f9b34fb": "Google Fast Pair",
    "0000fd6f-0000-1000-8000-00805f9b34fb": "Windows Device",
    "9fa480e0-4967-4542-9390-d343dc5d04ae": "Apple Device"
}
def is_working_hours():
    current_hour = datetime.now().hour
    return 7 <= current_hour < 19

# Removed get_device_type function as it relied on UUIDs

def get_manufacturer_info(manufacturer_data):
    """Zjist√≠ v√Ωrobce a typ za≈ô√≠zen√≠ z manufacturer_data"""
    manufacturer_info = []
    manufacturer_mapping = {
        76: "Apple",  # Company Identifier Code 0x004C
        6: "Microsoft",  # Company Identifier Code 0x0006
        117: "Samsung",  # Company Identifier Code 0x0075
        224: "Google",  # Company Identifier Code 0x00E0
        89: "Sony",  # Company Identifier Code 0x0059
        15: "Intel",  # Company Identifier Code 0x000F
        2: "IBM",  # Company Identifier Code 0x0002
        48: "Nokia",  # Company Identifier Code 0x0030
        85: "Qualcomm",  # Company Identifier Code 0x0055
        72: "Broadcom",  # Company Identifier Code 0x0048
        112: "Huawei",  # Company Identifier Code 0x0070
        208: "Xiaomi",  # Company Identifier Code 0x00D0
        240: "Oppo",  # Company Identifier Code 0x00F0
        200: "Vivo",  # Company Identifier Code 0x00C8
    }
    for key, value in manufacturer_data.items():
        manufacturer_info.append(manufacturer_mapping.get(key, f"Unknown Manufacturer (ID: {key})"))
    return manufacturer_info

# Naƒçten√≠ UUID Raspberry Pi
folder_path = os.path.join(os.getcwd(), "production", "raspberry_uuid") # Upraven√° cesta
file_path = os.path.join(folder_path, "uuid.txt")
raspberry_uuid = "unknown_raspberry_uuid" # Defaultn√≠ hodnota
if os.path.exists(file_path):
    with open(file_path, "r") as file:
        raspberry_uuid = file.read().strip()
else:
    print(f"Soubor s UUID Raspberry Pi nebyl nalezen: {file_path}")


def get_device_type(uuids):
    device_types = []
    for uuid_str in uuids: # P≈ôejmenov√°no pro srozumitelnost
        if uuid_str.lower() in KNOWN_DEVICE_UUIDS:
            device_types.append(KNOWN_DEVICE_UUIDS[uuid_str.lower()])
    return device_types if device_types else ["Unknown Device"]

def format_device_data(device):
    uuids = device.metadata.get("uuids", [])
    # Ujistƒõte se, ≈æe manufacturer_data kl√≠ƒçe jsou stringy, pokud tak p≈ôich√°zej√≠ z bleak
    raw_manufacturer_data = device.metadata.get("manufacturer_data", {})
    processed_manufacturer_data = {str(k): v.hex() for k, v in raw_manufacturer_data.items()}

    return {
        "name": device.name or "Unknown",
        "mac": device.address,
        "rssi": device.rssi,
        "uuids": uuids,
        "device_types": get_device_type(uuids),
        "manufacturer_data": processed_manufacturer_data,
        "manufacturer_info": get_manufacturer_info(processed_manufacturer_data) # Pou≈æijte zpracovan√° data
    }

async def scan_and_send():
    while True:
        if not is_working_hours():
            print("‚è∞ Mimo pracovn√≠ dobu (7:00-19:00), ƒçek√°m...")
            await asyncio.sleep(60)
            continue

        try:
            print("üîç Spou≈°t√≠m BLE skenov√°n√≠...")
            # Zv√Ω≈°en√≠ timeoutu m≈Ø≈æe pomoci naj√≠t v√≠ce za≈ô√≠zen√≠, ale prodlou≈æ√≠ skenov√°n√≠
            devices = await BleakScanner.discover(timeout=10.0) 

            if not devices:
                print("‚ùå Nenalezena ≈æ√°dn√° BLE za≈ô√≠zen√≠.")
                await asyncio.sleep(30)
                continue

            print(f"‚úÖ Nalezeno {len(devices)} za≈ô√≠zen√≠")
            
            all_discovered_macs = [d.address for d in devices]

            for device in devices:
                device_data = format_device_data(device)
                payload = {
                    "data": device_data,
                    "timestamp": datetime.now().isoformat() # P≈ôid√°n√≠ ƒçasov√©ho raz√≠tka
                }
                
                device_types = device_data["device_types"]
                print(f"üì± Za≈ô√≠zen√≠ {device.address} (RSSI: {device.rssi}) typu: {', '.join(device_types)}")

                # Pou≈æit√≠ funkce z porovnani.py pro kontrolu, zda je za≈ô√≠zen√≠ "ovƒõ≈ôen√©" (tj. v bl√≠zkosti)
                # Tato logika je oddƒõlen√° od GATT ovƒõ≈ôen√≠.
                # Zde "overenaadresa" znamen√°, ≈æe MAC adresa za≈ô√≠zen√≠ byla nalezena v seznamu aktu√°lnƒõ skenovan√Ωch za≈ô√≠zen√≠.
                # To nen√≠ √∫plnƒõ "ovƒõ≈ôen√≠" ve smyslu identity, sp√≠≈°e potvrzen√≠ p≈ô√≠tomnosti.
                # Funkce check_if_device_is_nearby nyn√≠ vrac√≠ boolean.
                
                # Normalizujeme MAC adresu za≈ô√≠zen√≠ pro konzistentn√≠ form√°t v MQTT t√©matu
                normalized_device_mac_for_topic = normalize_mac_address(device.address)

                # Logika pro urƒçen√≠, zda je adresa "ovƒõ≈ôen√°" (tj. nalezena mezi ostatn√≠mi skenovan√Ωmi)
                # Tato ƒç√°st byla ve va≈°em k√≥du trochu nejasn√°, `handle_incoming_message` se zd√°lo b√Ωt pro toto.
                # Nyn√≠ pou≈æ√≠v√°me `check_if_device_is_nearby`.
                # `uuid_uzivatele` je zde pou≈æito pro identifikaci "u≈æivatele" v MQTT t√©matu.
                
                # P≈Øvodn√≠ logika byla: if normalized_mac in normalized_nearby_macs:
                # co≈æ je p≈ôesnƒõ to, co dƒõl√° check_if_device_is_nearby(device.address, all_discovered_macs)
                
                # Pro jednoduchost, pokud chcete oznaƒçit za≈ô√≠zen√≠, jeho≈æ MAC odpov√≠d√° uuid_uzivatele:
                if normalize_mac_address(device.address) == normalize_mac_address(uuid_uzivatele):
                    topic = f"ble_devices/{raspberry_uuid}/{normalized_device_mac_for_topic}/overenaadresa_uzivatele/{uuid_uzivatele}"
                    print(f"‚úÖ Za≈ô√≠zen√≠ {device.address} odpov√≠d√° uuid_uzivatele. Odes√≠l√°m na MQTT (u≈æivatel): {topic}")
                # Obecn√© odesl√°n√≠ pro v≈°echna za≈ô√≠zen√≠
                else:
                    topic = f"ble_devices/{raspberry_uuid}/{normalized_device_mac_for_topic}"
                    print(f"‚úÖ Odes√≠l√°m za≈ô√≠zen√≠ {device.address} na MQTT: {topic}")

                try:
                    send_payload(topic, payload)
                except Exception as e:
                    print(f"‚ùå Chyba p≈ôi odes√≠l√°n√≠ dat na MQTT pro {device.address}: {e}")

            await asyncio.sleep(30)

        except Exception as e:
            print(f"‚ùå Chyba p≈ôi skenov√°n√≠ nebo zpracov√°n√≠: {e}", exc_info=True)
            await asyncio.sleep(10)

if __name__ == "__main__":
    print("üöÄ Spou≈°t√≠m BLE monitoring...")
    print(f"üÜî UUID Raspberry Pi: {raspberry_uuid}")
    print(f"üë§ UUID U≈æivatele (pro MQTT a GATT): {uuid_uzivatele}")
    print("‚è∞ Pracovn√≠ doba: 7:00 - 19:00")
    asyncio.run(scan_and_send())